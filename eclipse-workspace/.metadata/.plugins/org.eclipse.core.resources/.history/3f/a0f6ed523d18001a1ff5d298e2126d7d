package com.selenium.pom;

import java.io.File;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.Alert;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class SeleniumBaseClass {

	public static WebDriver driver;

	public static WebDriver browserLaunch(String browserName) throws Throwable {
		try {
			if (browserName.equalsIgnoreCase("chrome")) {
				System.setProperty("webdriver.chrome.driver",
						System.getProperty("user.dir") + "//Drivers//chromedriver.exe");
				driver = new ChromeDriver();
			} else if (browserName.equalsIgnoreCase("firefox")) {
				System.setProperty("webdriver.gecko.driver",
						System.getProperty("user.dir") + "//Drivers//geckodriver.exe");
				driver = new FirefoxDriver();
			} else if (browserName.equalsIgnoreCase("ie")) {
				System.setProperty("webdriver.ie.driver",
						System.getProperty("user.dir") + "//Drivers//IEDriverServer.exe");
				driver = new InternetExplorerDriver();
			} else {
				throw new Exception("Invalid browser name");
			}

			driver.manage().window().maximize();
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			return driver;
		} catch (Exception e) {

			e.printStackTrace();
			throw new Exception("Issue is browser launch");
		}
	}
	public static void ScrollToElement(WebElement element) throws Exception {
		try {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].scrollIntoView();", element);
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception();
		}
	}

	public static void getUrl(String url) throws Exception {
		try {
			driver.get(url);
		} catch (Exception e) {

			e.printStackTrace();
			throw new Exception("URL Is not valid");
		}
	}
	public static void inputValuesInElement(WebElement element, String value) {
		try {
			element.clear();
			element.sendKeys(value);
		} catch (Exception e) {
			System.out.println(value +" couldnt be entered");
		}


	}

	public static void waitForElementVisiblity(WebElement element) throws Exception {
		try {
			WebDriverWait wb = new WebDriverWait(driver, 10);
			wb.until(ExpectedConditions.visibilityOf(element));
		} catch (Exception e) {
			e.printStackTrace();
			throw new Exception();
		}
	}

	public static void clickOnTheElement(WebElement element ) {

		try {
			
				element.click();
			

		} catch (Exception e) {

			System.out.println("Couldnt be clicked");
		}

	}	

	public static void mouseOver(WebElement element) {

		try {
			if(element.isDisplayed()&&element.isEnabled()) {

				Actions ac=new Actions(driver);
				ac.moveToElement(element);

			}
		} catch (Exception e) {

			System.out.println("Element is not clicked");
		}
	}
	//select using value from dd
	public static void selectFromDropDown(WebElement element,String value) {

		Select s=new Select(element);
		s.selectByValue(value);
	}
	
	public static void selectOptionInDD(WebElement element, String options, String values) throws Exception {
		waitForElementVisiblity(element);
		Select sc = new Select(element);
		if (options.equalsIgnoreCase("index")) {
			sc.selectByIndex(Integer.parseInt(values));
		} else if (options.equalsIgnoreCase("value")) {
			sc.selectByValue(values);
		} else if (options.equalsIgnoreCase("visibletext")) {
			sc.selectByVisibleText(values);
		} else {
			throw new Exception("Not a valid options");

		}

	}

	//text to int
	public static int GetttingTextFromElementToInt(WebElement element) {
		int i=0;
		String s= element.getText();
		i=Integer.parseInt(s);
		return i;

	}
	//just getText
	public static String GetttingTextFromElement(WebElement element) {

		String s= element.getText();

		return s;

	}
	//pop up

	public static void HandlePopUp(WebElement element) {

		Alert a=driver.switchTo().alert();
		a.accept();

	}
	
	public static void scrollToPageHeight(String options) throws Exception {
		JavascriptExecutor js = (JavascriptExecutor) driver;
		if (options.equalsIgnoreCase("up")) {
			js.executeScript("window.scrollTo(0, -document.body.scrollHeight)");
		} else if (options.equalsIgnoreCase("down")) {
			js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
		} else {
			throw new Exception("Not a valid option");
		}
	}
	
	public static void scrollUsingCoordinates(int width, int height) throws Exception {
		try {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("window.scrollBy(" + width + "," + height + ")");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new Exception();
		}
	}
	public static void validationOfText(String x, String y) {
		try {
			if(x.equalsIgnoreCase(y))
				System.out.println("The value "+y+" has been successfully entered");
			else {
				System.out.println("The value "+y+" has not been successfully entered");
				throw new Exception("Values"+x+y+"are not same");
			}
		} catch (Exception e) {
			System.out.println("Exception from validationOfText Method");
		}

	}
	
	public static void takeScreenShot(String filename) throws Throwable {

		try {
			TakesScreenshot ts = (TakesScreenshot) driver;
			File temp = ts.getScreenshotAs(OutputType.FILE);
			File des = new File(
					System.getProperty("C:\\Users\\divibharath\\eclipse-workspace\\Selenium\\FileScreenshot" + filename + ".png"));
			FileUtils.copyFile(temp, des);
		} catch (WebDriverException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
